version: '3'
services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 3000 of the container to port 8080 on the host
      - "8080:3000"
    volumes:
      # Mount the frontend directory to the /app directory in the container
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
  fraud_detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src

  transaction_verification:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the transaction_verification directory
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      # Expose port 50052 on the host, and map port 50052 of the container to port 50052 on the host
      - 50052:50052
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the transaction_verification directory to see how this is used
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the transaction_verification/src directory in the current directory to the /app/transaction_verification/src directory in the container
      - ./transaction_verification/src:/app/transaction_verification/src

  suggestions:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the suggestions directory
      dockerfile: ./suggestions/Dockerfile
    ports:
      # Expose port 50053 on the host, and map port 50053 of the container to port 50053 on the host
      - 50053:50053
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the suggestions directory to see how this is used
      - PYTHONFILE=/app/suggestions/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the suggestions/src directory in the current directory to the /app/suggestions/src directory in the container
      - ./suggestions/src:/app/suggestions/src


  payment:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the suggestions directory
      dockerfile: ./payment/Dockerfile
    ports:
      # Expose port 50060 on the host, and map port 50060 of the container to port 50060 on the host
      - 50063:50063
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the suggestions directory to see how this is used
      - PYTHONFILE=/app/payment/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the suggestions/src directory in the current directory to the /app/suggestions/src directory in the container
      - ./payment/src:/app/payment/src

  order_queue:
      build:
          # Use the current directory as the build context
          # This allows us to access the files in the current directory inside the Dockerfile
          context: ./
          # Use the Dockerfile in the suggestions directory
          dockerfile: ./order_queue/Dockerfile
      ports:
          # Expose port 50053 on the host, and map port 50053 of the container to port 50053 on the host
          - 50054:50054
      environment:
          # Pass the environment variables to the container
          # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
          - PYTHONUNBUFFERED=TRUE
          # The PYTHONFILE environment variable specifies the absolute entry point of the application
          # Check app.py in the suggestions directory to see how this is used
          - PYTHONFILE=/app/order_queue/src/app.py
      volumes:
          # Mount the utils directory in the current directory to the /app/utils directory in the container
          - ./utils:/app/utils
          # Mount the suggestions/src directory in the current directory to the /app/suggestions/src directory in the container
          - ./order_queue/src:/app/order_queue/src

  redis_cluster:
      # A key value store used for leader election
      image: redis:latest
      container_name: redis
      restart: always
      ports:
          - 6379:6379
      volumes:
          - ./store/redis1/data:/redis_data

  order_executor_1: # The advice in the slack was to use 2 copies of the same service with different name
      build:
          context: ./
          dockerfile: ./order_executor/Dockerfile
      ports:
          - 50056:50056
      environment:
          - PYTHONUNBUFFERED=TRUE
          - PYTHONFILE=/app/order_executor/src/app.py
          - REDIS_ADDRESS=http://redis:6379
          - SERVICE_ID=executor1
          - PORT=50056
          - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
      volumes:
          - ./utils:/app/utils
          - ./order_executor/src:/app/order_executor/src

  order_executor_2:
      build:
          context: ./
          dockerfile: ./order_executor/Dockerfile
      ports:
          - 50057:50057
      environment:
          - PYTHONUNBUFFERED=TRUE
          - PYTHONFILE=/app/order_executor/src/app.py
          - REDIS_ADDRESS=http://redis:6379
          - SERVICE_ID=executor2
          - PORT=50057
          - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
      volumes:
          - ./utils:/app/utils
          - ./order_executor/src:/app/order_executor/src

  order_executor_3:
      build:
          context: ./
          dockerfile: ./order_executor/Dockerfile
      ports:
          - 50058:50058
      environment:
          - PYTHONUNBUFFERED=TRUE
          - PYTHONFILE=/app/order_executor/src/app.py
          - REDIS_ADDRESS=http://redis:6379
          - SERVICE_ID=executor3
          - PORT=50058
          - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
      volumes:
          - ./utils:/app/utils
          - ./order_executor/src:/app/order_executor/src

  books_database_1:
      build:
          context: ./
          dockerfile: ./books_database/Dockerfile
      ports:
          - 50060:50060
      environment:
          - PYTHONUNBUFFERED=TRUE
          - PYTHONFILE=/app/books_database/src/app.py
          - REDIS_ADDRESS=http://redis:6379
          - SERVICE_ID=books_database_1
          - PORT=50060
          - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
          - LIST_OF_REPLICAS=books_database_2:50061,books_database_3:50062
      volumes:
          - ./utils:/app/utils
          - ./books_database/src:/app/books_database/src
  books_database_2:
      build:
          context: ./
          dockerfile: ./books_database/Dockerfile
      ports:
          - 50061:50061
      environment:
          - PYTHONUNBUFFERED=TRUE
          - PYTHONFILE=/app/books_database/src/app.py
          - REDIS_ADDRESS=http://redis:6379
          - SERVICE_ID=books_database_2
          - PORT=50061
          - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
          - LIST_OF_REPLICAS=books_database_1:50060,books_database_3:50062
      volumes:
          - ./utils:/app/utils
          - ./books_database/src:/app/books_database/src

  books_database_3:
      build:
          context: ./
          dockerfile: ./books_database/Dockerfile
      ports:
          - 50062:50062
      environment:
          - PYTHONUNBUFFERED=TRUE
          - PYTHONFILE=/app/books_database/src/app.py
          - REDIS_ADDRESS=http://redis:6379
          - SERVICE_ID=books_database_3
          - PORT=50062
          - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
          - LIST_OF_REPLICAS=books_database_1:50060,books_database_2:50061
      volumes:
          - ./utils:/app/utils
          - ./books_database/src:/app/books_database/src

  observability:
    image: grafana/otel-lgtm
    ports:
      - "3000:3000"
      - "4317:4317"
      - "4318:4318"
    environment:
      - OTEL_METRIC_EXPORT_INTERVAL=1000
